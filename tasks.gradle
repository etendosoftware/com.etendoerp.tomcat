task tomcatDeploy {
    finalizedBy "copyWarToVolume"
    dependsOn "tomcatStart"
    doLast {
        def contextName = project.property("context.name")
        def destUrl = isBBDDEnabled ? "db" : hostURL()
        def port = isBBDDEnabled ? "5432" : project.property("bbdd.port")
        // Update Openbravo.properties
        def propertiesFile = file('WebContent/WEB-INF/Openbravo.properties')
        def fileContent = propertiesFile.text
        fileContent = fileContent.replaceAll(/bbdd.url=.*/, "bbdd.url=jdbc:postgresql://${destUrl}:${port}")
        propertiesFile.write(fileContent)
        delete file("lib/${contextName}.war")
    }
}

task copyWarToVolume {
    dependsOn 'antWar'
    doLast {
        def contextName = project.property("context.name")
        executeDockerComposeCommand("cp ./lib/${contextName}.war tomcat:/usr/local/tomcat/webapps/${contextName}.war")
        def indexHtmlContent = """
            <!DOCTYPE html>
            <html>
            <head>
                <meta http-equiv="refresh" content="0; URL='/${contextName}'" />
                <title>Redirecting...</title>
            </head>
            <body>
                <p>If you are not redirected automatically, follow this <a href="/${contextName}">link to /${contextName}</a>.</p>
            </body>
            </html>
        """
        def composeRootDir = layout.buildDirectory.dir("compose/ROOT").get().asFile
        composeRootDir.mkdirs()

        def indexFile = new File(composeRootDir, "index.html")
        indexFile.write(indexHtmlContent)

        executeDockerComposeCommand("cp ${composeRootDir} tomcat:/usr/local/tomcat/webapps/ROOT")
    }
}

task tomcatDeleteWar {
    doLast {
        try {
            def result = executeDockerComposeCommand("ps -q tomcat")
            if (result) {
                executeDockerComposeCommand("exec tomcat rm -rf /usr/local/tomcat/webapps/*.war")
            } else {
                logger.warn("Tomcat is not running.")
            }
        } catch (Exception e) {
            logger.warn("Failed to check Tomcat status or delete WAR files: ${e.message}")
        }
    }
}

task tomcatStart {
    doLast {
        executeDockerComposeCommand("up -d tomcat")
    }
}

task tomcatStop {
    doLast {
        executeDockerComposeCommand("stop tomcat")
    }
}

task "tomcat.env.file" {
    description = 'Generates the .env file for Tomcat'
    group = 'Docker'

    doLast {
        def props = envFile()
        def env = props.envFile
        def tomcatDebugPort = project.hasProperty("docker_com.etendoerp.tomcat_debug") ? project.property("docker_com.etendoerp.tomcat_debug").toString() : "8009"
        env.withWriterAppend { writer ->
            writer.write("TOMCAT_DEBUG_PORT=${tomcatDebugPort}\n")
        }
        // Tomcat Resource Limits
        def TOMCAT_BASE_MEM_MB = getTypedProp("tomcat.base.memory.mb") ?: 256
        def TOMCAT_BASE_CPU = getTypedProp("tomcat.base.cpu") ?: 1.0

        def tomcatServiceFactors = [
            TOMCAT: [mem: 2.0, cpu: 1.0] // Default 512Mb - 1 Cpu
        ]
        tomcatServiceFactors.each { service, factors ->
            def memMB = (TOMCAT_BASE_MEM_MB * factors.mem).toInteger()
            def cpu = ((TOMCAT_BASE_CPU * factors.cpu) as BigDecimal).setScale(3, BigDecimal.ROUND_HALF_UP).toString()

            upsertEnvProperty("BASE_${service}_MEMORY_LIMIT", "${memMB}M")
            upsertEnvProperty("BASE_${service}_CPU_LIMIT", "${cpu}")
        }
    }
}

/*
 * This script configures tasks related to Tomcat deployment in a Gradle build.
 * 
 * After the project is evaluated, it checks if the `isTomcatEnabled` property is set.
 * If `isTomcatEnabled` is true, it configures the following tasks:
 * 
 * - `smartbuild`: Finalizes with `tomcatDeploy`.
 * - `compile.complete`: Depends on `tomcatDeleteWar`.
 * - `compile.complete.deploy`: Depends on `tomcatDeleteWar`.
 * - `update.database`: Depends on `tomcatStop`.
 * - `install`: Depends on `tomcatStop`.
 * - `generateEnvFile`: Finalizes with `tomcat.env.file`.
 * 
 * These configurations ensure that the appropriate Tomcat tasks are executed
 * during the build process, depending on the state of `isTomcatEnabled`.
 */
afterEvaluate {
  if (!ext.has("isTomcatEnabled")) {
    return
  }
  if (isTomcatEnabled) {
    tasks.named("smartbuild").configure { task ->
      task.finalizedBy("tomcatDeploy")
    }
    tasks.named("compile.complete").configure { task ->
      task.dependsOn("tomcatDeleteWar")
    }
    tasks.named("compile.complete.deploy").configure { task ->
      task.dependsOn("tomcatDeleteWar")
      task.finalizedBy("tomcatDeploy")
    }
    tasks.named("update.database").configure { task ->
      task.dependsOn("tomcatStop")
    }
    tasks.named("install").configure { task ->
      task.dependsOn("tomcatStop")
    }
    tasks.named("generateEnvFile").configure { task ->
      task.finalizedBy("tomcat.env.file")
    }
  }
}
