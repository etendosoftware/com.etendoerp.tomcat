task tomcatDeploy {
    finalizedBy "copyWarToVolume"
    doLast {
        def contextName = project.property("context.name")
        def destUrl = isBBDDEnabled ? "db" : "host.docker.internal"
        def port = isBBDDEnabled ? "5432" : project.property("bbdd.port")
        // Update Openbravo.properties
        def propertiesFile = file('WebContent/WEB-INF/Openbravo.properties')
        def fileContent = propertiesFile.text
        fileContent = fileContent.replaceAll(/bbdd.url=.*/, "bbdd.url=jdbc:postgresql://${destUrl}:${port}")
        propertiesFile.write(fileContent)
        //
        delete file("lib/${contextName}.war")
    }
}

task copyWarToVolume {
    dependsOn 'antWar'
    doLast {
        def contextName = project.property("context.name")
        executeDockerComposeCommand("cp ./lib/${contextName}.war tomcat:/usr/local/tomcat/webapps/${contextName}.war")
        def indexHtmlContent = """
            <!DOCTYPE html>
            <html>
            <head>
                <meta http-equiv="refresh" content="0; URL='/${contextName}'" />
                <title>Redirecting...</title>
            </head>
            <body>
                <p>If you are not redirected automatically, follow this <a href="/${contextName}">link to /${contextName}</a>.</p>
            </body>
            </html>
        """
        file("${buildDir}/compose/ROOT").mkdirs()

        def indexFile = file("${buildDir}/compose/ROOT/index.html")
        indexFile.write(indexHtmlContent)
        executeDockerComposeCommand("cp $buildDir/compose/ROOT tomcat:/usr/local/tomcat/webapps/ROOT")
    }
}

task tomcatDeleteWar {
    doLast {
        def contextName = project.property("context.name")
        executeDockerComposeCommand("exec tomcat rm -rf /usr/local/tomcat/webapps/*.war")
    }
}

task tomcatStart {
    doLast {
        executeDockerComposeCommand("up -d tomcat")
    }
}

task tomcatStop {
    doLast {
        executeDockerComposeCommand("stop tomcat")
    }
}

task "tomcat.env.file" {
    description = 'Generates the .env file for Tomcat'
    group = 'Docker'

    doLast {
        def props = envFile()
        def env = props.envFile
        def tomcatPort = project.hasProperty("docker_com.etendoerp.tomcat_port") ? project.property("docker_com.etendoerp.tomcat_port").toString() : "8080"
        def tomcatDebugPort = project.hasProperty("docker_com.etendoerp.tomcat_debug") ? project.property("docker_com.etendoerp.tomcat_debug").toString() : "8009"
        env.withWriterAppend { writer ->
            writer.write("TOMCAT_PORT=${tomcatPort}\n")
            writer.write("TOMCAT_DEBUG_PORT=${tomcatDebugPort}\n")
        }
    }
}

afterEvaluate {
    tasks.named("smartbuild").configure { task ->
        task.dependsOn("tomcatStart")
        task.finalizedBy("tomcatDeploy")
    }
    tasks.named("update.database").configure { task ->
        task.dependsOn("tomcatStop")
    }
    tasks.named("install").configure { task ->
        task.dependsOn("tomcatStop")
    }
    tasks.named("generateEnvFile").configure { task ->
        task.finalizedBy("tomcat.env.file")
    }

}
